"""
Program:
--------
    Program 2 - Pig Game Part 2.

Description:
------------
    Implemented Aggressive, Cautious, and Sprint to finish methods.

Name: Zac Conley
Date: 29 Oct. 2016
"""
import random
import abc

 #"""Dice Class
    #initializes number of sides and contains roll
    #Attributes:
    #NumSides is how many sides your dice has
    #"""
class Dice(object):
    def __init__(self,num_sides=6):
        self.NumSides = num_sides

    def Roll(self):
        return random.randint(1,self.NumSides)  

##############################################################################
##############################################################################

 #"""Pig Class
  #  Holds info about the dice
   # Attributes:
   #     Num dice is the number of dice being used
    #    DiceSides is how many sides your dice has
     #   DiceList is a list holding all Dice
      #  Skunkvalue is the number that turns your round score to 0
    #"""
class Pig(object):
    def __init__(self,num_dice=1,dice_sides=6,skunk_value=1):
        self.NumDice = num_dice
        self.DiceSides = dice_sides
        self.DiceList = []
        self.SkunkValue = skunk_value
        for i in range(self.NumDice):
            self.DiceList.append(Dice(self.DiceSides))
    """
    @Method: Roll
    @Description: 
        One roll in a pig game, with 1 to NumDice per roll
    @Returns: int: [0=skunk value occured, total of all dice otherwise]
    """ 
    def Roll(self):
        scores = []
        for d in self.DiceList:
            scores.append(d.Roll())
            if self.SkunkValue in scores:
                return 0 
        return sum(scores)

##############################################################################
##############################################################################
 #"""Player Class
   # Holds various bits of information the player needs
    #Attributes:
       # Name is players Name
        #Total score is each players total score
        #Last score is the last score each player got
        #LastNumRolls is how many times a player rolled the previous turn
        #Opponents is a dictionary of all opponents
        #NumDice is how many dice you use
        #Strategy chooses which strategy you will use
        #pig runs the Pig class initializer
        #strategies makes a dictionary
    #"""
class Player(object):
    def __init__(self,name,num_dice=1,strategy=('Random',7)):
        self.Name = name        # My name
        self.TotalScore = 0     # Total score
        self.LastScore = 0      # Score on last turn
        self.LastNumRolls = 0   # Last number of rolls
        self.Opponents = {}     # Dict of opponents
        self.NumDice = num_dice
        self.Strategy = strategy[0]
        self.pig = Pig(num_dice)# init pig game 
        self.Strategies = {
                'Target_Score':0,
                'Target_Rolls':0,
                'Sprint_To_Finish':0,
                'Mimic_Opponent':0,
                'Situational':0,
                'Random':0
            }
        self.Strategies[strategy[0]] = strategy[1]

    """
    @Method: AddOpponents
    @Description: Adds an opponent, or list of opponents (as long as it's not me) to a dictionary with name and score.
        Example: {
                   'bob':0.
                   'sue':0
                 }
    
    @Params: [] - Opponents
    @Returns: None
    """
    def AddOpponents(self,opponent):
        if not type(opponent) == list and not opponent.Name == self.Name:
            self.Opponents[opponent.Name] = opponent
        else:
            for op in opponent:
                if not op.Name == self.Name:
                    self.Opponents[op.Name] = op

    """
    @Method: __str__
    @Description: Prints out a nice version of self
    @Returns: string representation
    """
    def __str__(self):
        tmp = " "
        for k,v in self.Opponents.items():
            tmp = tmp + "[" + k + " " + str(v.TotalScore) + "," + str(v.LastScore) + "," + str(v.LastNumRolls) + "] "
        return "Name: %s, TotScore: %s, LastScore: %s, LastNumRolls: %s, Opponents: %s" % (self.Name,self.TotalScore,self.LastScore,self.LastNumRolls,tmp)
        
    """
    @Method: __repr__
    @Description: Calls __str__
    @Returns: a call to __str__
    """
    def __repr__(self):
        return self.__str__()
        

    """
    @Method: SetStrategy
    @Description: Sets the current strategy for the player
    @Params:
        strategy: string 
        value: int    
    @Returns: None
    @Usage:
            SetStrategy('Target_Score',20)
            SetStrategy('Target_Rolls',5)     
            SetStrategy('Sprint_To_Finish',72)    
    """
    def SetStrategy(self,strategy,value):
        if strategy in self.Strategies:
            self.Strategies[strategy] = value
        else:
            raise ValueError('The strategy does not exist!')

    """
    @Method: PlayerRoll
    @Description: Implements a turn for a player. If the player rolls 
                  a 1 at any time zero is returned, 
                  otherwise the total of the rolls is returned.
    @Params:
        string: player
        int: max rolls 
    @Returns: int: total
    """
    def Roll(self,targetscore):#added targetscore
        #self.Strategy='Cautious' #uncomment to run strategies
        #self.Strategy='Aggressive'
        if (float(self.TotalScore) / float(targetscore)) > .79:
            self.Strategy = 'SprintToFinish' 

        if self.Strategy == 'Random':
            self.RandomRoll(targetscore)
        elif self.Strategy == 'Aggressive':
            self.Aggressive(targetscore)
        elif self.Strategy == 'Cautious':
            self.Cautious(targetscore)
        elif self.Strategy == 'Robust':
            pass
        elif self.Strategy == 'CopyCat':
            pass
        elif self.Strategy=='SprintToFinish':
            self.Sprint_To_Finish(targetscore)

     
       # """RandomRoll
        #rolls a random number of times between 1 and 7 and declares a
       # winner if the target score is hit
    #Args:
        #targetscore-the score at which a player wins the game
    #Returns:
        #0
    #"""
    def RandomRoll(self,targetscore):#added targetscore
            Score = 0                    #for comparison
            NumRolls = 0
            roundscore=0 #used if zero rolled
            self.LastScore=0
            for i in range(random.randint(1,7)):#runs 1-7 times
                if (not self.TotalScore >targetscore-1):#stops run
                    NumRolls += 1              #when taget score is hit
                    roll = self.pig.Roll()
                    roundscore+=roll #accumulates in case of 0
                    self.LastScore+=roll
                    if roll == 0:
                        self.TotalScore-=roundscore #clears roundscore
                        self.LastScore=0  #and LastScore if 0 is hit
                        break
                    self.TotalScore += roll
                if(self.TotalScore >targetscore-1):#prints name and 
                    print(self.Name,               #that score is 
                    " has just reached ",          #reached
                    targetscore,
                    " points and is stopping.")
                    break
            return 0

   #"""Aggressive
       # rolls a random number of times between 8 and 9 and declares a
        #winner if the target score is hit
    #Args:
        #targetscore-the score at which a player wins the game
    #Returns:
       # 0
    #"""
    def Aggressive(self,targetscore):#added targetscore
            Score = 0                    #for comparison
            NumRolls = 0
            roundscore=0 #used if zero rolled
            self.LastScore=0
            for i in range(random.randint(8,9)): #runs 8-9 times
                if (not self.TotalScore >targetscore-1):#stops run
                    NumRolls += 1              #when taget score is hit
                    roll = self.pig.Roll()
                    roundscore+=roll #accumulates in case of 0
                    self.LastScore+=roll
                    if roll == 0:
                        self.TotalScore-=roundscore #clears rounscore
                        self.LastScore=0 #and LastScore if 0 is hit
                        break
                    self.TotalScore += roll
                if(self.TotalScore >targetscore-1):#prints name and 
                    print(self.Name,               #that score is 
                    " has just reached ",          #reached
                    targetscore,
                    " points and is stopping.")
                    break
            return 0

#"""Cautious
 #       rolls a random number of times between 3 and 4 and declares a
 #       winner if the target score is hit
  #  Args:
   #     targetscore-the score at which a player wins the game
    #Returns:
     #   0
   # """
    def Cautious(self,targetscore):#added targetscore
            Score = 0                    #for comparison
            NumRolls = 0
            roundscore=0 #used if zero rolled
            self.LastScore=0
            for i in range(random.randint(3,4)):
                if (not self.TotalScore >targetscore-1):#stops run
                    NumRolls += 1              #when taget score is hit
                    roll = self.pig.Roll()
                    roundscore+=roll #accumulates in case of 0
                    self.LastScore+=roll
                    if roll == 0:
                        self.TotalScore-=roundscore #clears roundscore
                        self.LastScore=0 #and LastScore if 0 is hit
                        break
                    self.TotalScore += roll
                if(self.TotalScore >targetscore-1):#prints name and 
                    print(self.Name,               #that score is 
                    " has just reached ",          #reached
                    targetscore,
                    " points and is stopping.")
                    break
            return 0
            
    def Target_Score(self):
        pass
        
    def Target_Roll(self):
        pass

#"""Sprint_To_Finish
 #       rolls until target score is hit unless zero is rolled
  #      declares winner if target score is hit
   # Args:
    #    targetscore-the score at which a player wins the game
    #Returns:
     #   0
    #"""
    def Sprint_To_Finish(self,targetscore):#added target score
        Score = 0                          #for comparison
        NumRolls = 0
        i=0
        roundscore=0 #used if zero rolled
        self.LastScore=0
        while (i<10): #infinite loops until targetscore is hit
            if (not self.TotalScore >targetscore-1):
                NumRolls += 1             
                roll = self.pig.Roll()
                roundscore+=roll #accumulates in case of 0
                self.LastScore+=roll
                if roll == 0:
                    self.TotalScore-=roundscore #clears roundscore
                    self.LastScore=0 #and LastScore if 0 is hit
                    break
                self.TotalScore += roll
            if(self.TotalScore >targetscore-1):#prints name and 
                print(self.Name,               #that score is 
                 " has just reached ",          #reached
                 targetscore,
                 " points and is stopping.")
                break
        return 0
        
    def Mimic_Opponent(self):
        pass

    def Situational(self):
        pass
        
    def Combination(self):
        pass


##############################################################################
##############################################################################

# """Game Class
  #  For x number of players game plays until target score is hit
   # Attributes:
     # list: Players - A list of player names
     #   int: NumDice - Number of dice per roll
      #  int: RandomRolls - Top value of random range for rolls
      #  int: TargetScore - Target score to trigger a winner
   # """
class Game(object):
    """
    @Method: Init
    @Description: Initializes a pig game instance
    @Params:
        list: Players - A list of player names
        int: NumDice - Number of dice per roll
        int: RandomRolls - Top value of random range for rolls
        int: TargetScore - Target score to trigger a winner
    @Returns: None
    """
    def __init__(self, **kwargs):
        self.Players = {}                           # player dictionary
        self.NumDice = kwargs['num_dice']           # number of dice per roll
        self.RandomRolls = kwargs['random_roles']   # max num random rolls
        self.TargetScore = kwargs['target_score']   # game winning score
        self.WinnerName = None                      # no winner yet
        
        # initialize all players
        self.AddPlayers(kwargs['players'])
            
        self.StartGame()
        
    def __str__(self):
        string = ""
        for name,obj in self.Players.items():
            string += obj.__str__() + "\n"
        return string
        
    """
    @Method: AddPlayers
    @Description: Adds a new player or players to the game
        Example: {
                   'bob':<player_object>
                   'sue':<player_object>
                 }
    
    @Params: [] - players
    @Returns: None
    """
    def AddPlayers(self,players):
        if not type(players) == list:
            self.Players[players.Name] = players
        else:
            for p in players:
                self.Players[p.Name] = p
                    
    """
    @Method: WinnerExists
    @Description: Checks to see if a player has acheived the target score.
    @Params:None
    @Returns: bool
    """         
    def StartGame(self):

        self.UpdatePlayerOpponents()
        
        # Main game loop
        while not self.WinnerExists():
            print(self)
            for name,PlayerObj in self.Players.items():
                 PlayerObj.Roll(self.TargetScore)#added target score
                                                 #for comparison
    """
    @Method: WinnerExists
    @Description: Checks to see if a player has acheived the target score.
    @Params:None
    @Returns: bool
    """
    def WinnerExists(self):
        for name,PlayerObj in self.Players.items():
            if PlayerObj.TotalScore >= self.TargetScore:
                self.WinnerName = PlayerObj.Name
                return True
        self.WinnerName = None
        return False

    """
    @Method: Winner
    @Description: Returns the winner, if there is one.
    @Params:None
    @Returns: [string,None]: Players name or None
    """
    def Winner(self):
        return self.WinnerName
        
    """
    @Method: UpdatePlayerOpponents
    @Description: Gives a copy of each player in the game, to every other player in the game. 
    @Params:None
    @Returns: None
    """   
    def UpdatePlayerOpponents(self):

        for name,PlayerObj in self.Players.items():
            PlayerObj.AddOpponents(self.Players.values())

##############################################################################
##############################################################################



def main():

    p1 = Player('ann')
    p2 = Player('bob')
    p3 = Player('sue')
    p4 = Player('dax')
    
    AllPlayers = [p1,p2,p3,p4]
    
    # Param values to initialize a pig game instance
    kwargs = {'num_dice':1,'random_roles':9,'target_score':100,'players':AllPlayers}

    g = Game(**kwargs)
    
    print(g)
    
    
main()